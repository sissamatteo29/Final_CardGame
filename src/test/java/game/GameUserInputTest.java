package game;

import org.junit.*;

import java.io.*;
import java.util.Scanner;

import static org.junit.Assert.assertEquals;

/**
 * Tests all the methods inside the Game class to obtain the initial input of the user
 */
public class GameUserInputTest {

    static File cards;
    ByteArrayInputStream myInput;
    ByteArrayOutputStream myOutput;
    InputStream saveInput;
    PrintStream saveOutput;

    /**
     * Creates a new file to test the askFileName() method
     */
    @BeforeClass
    public static void createFile(){
        cards = new File("cards.txt");
        try {
            cards.createNewFile();
        } catch (IOException e) {
            System.out.println("Failed creating the file cards.txt");
            e.printStackTrace();
        }
    }

    /**
     * Gathers the common code to manipulate the standard input and output in the System class
     */
    @Before
    public void modifyInputAndOutput(){
        saveInput = System.in;      //Backup of the standard input
        saveOutput = System.out;    //Backup of the standard output

        myOutput = new ByteArrayOutputStream();
        PrintStream printStream = new PrintStream(myOutput);
        System.setOut(printStream);
    }

    @After
    public void restoreInputAndOutput(){
        /* Restores the standard input and output to keyboard and display */
        System.setOut(saveOutput);
        System.setIn(saveInput);
    }

    /**
     * Tests the user's input for the number of players
     */
    @Test
    public void testAskNumberOfPlayers(){

        String numberOfPlayerInput = "tt\n7\nC5\n";     //String containing the user's inputs (correct and wrong)

        /* Modifies the standard input */
        myInput = new ByteArrayInputStream(numberOfPlayerInput.getBytes());
        System.setIn(myInput);

        /* Calls the method to be tested from the Game class */
        Game testGame = new Game();
        testGame.setScanner(new Scanner(System.in));
        testGame.askNumberOfPlayers();

        /* Working on the output stream, checks if the program accepted the number 7 as a correct input */
        String resultingString = myOutput.toString();
        int index = resultingString.indexOf("The game");
        resultingString = resultingString.substring(index);
        String[] splitResultingString = resultingString.split(" ");     //Splits the string into words
        assertEquals("The initial method to get the user's input for the number of players " +
                "is not working properly", "7", splitResultingString[4]);       //The 5th word in the array is the number of players
    }

    /**
     * Tests the user's input for the file name
     */
    @Test
    public void testAskFileName(){

        String numberOfPlayerInput = "Rome\ntt\ncards.txt\nC5\n";      //String with the possible user's inputs (correct and wrong)

        /* Modifies the standard input and output to control the inputs and the outputs of the method to test */
        myInput = new ByteArrayInputStream(numberOfPlayerInput.getBytes());
        System.setIn(myInput);

        /* Calls the method to be tested in the Game class */
        Game testGame = new Game();
        testGame.setScanner(new Scanner(System.in));
        testGame.askFileName();

        /* Manipulates the output string generated by the method to check if the "cards.txt" file was the one accepted as the input file */
        String resultingString = myOutput.toString();
        int index = resultingString.indexOf("Selected");
        resultingString = resultingString.substring(index);
        String[] splitResultingString = resultingString.split(" ");     //Splits the string into words
        assertEquals("The initial method to get the user's input for the textfile" +
                " is not working properly", "cards.txt", splitResultingString[2].strip());

    }


    @AfterClass
    public static void deleteFile(){
        cards.delete();
    }
}
